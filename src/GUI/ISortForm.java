/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;
import logic.controllers.InsertionSortStrategy;
import logic.controllers.MergeStrategy;
import logic.controllers.QuickSortStrategy;
import logic.controllers.SelectionSortStrategy;

/**
 *
 * @author Sebastian Rodriguez
 * @email roskoff@hotmail.es
 * @linkedin https://uy.linkedin.com/in/sebastianr88
 *
 */

public class ISortForm extends javax.swing.JInternalFrame{

    /**
     * Creates new form NewJInternalFrame
     */
    public String pipe = "|"; 
    final DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    
    
    public ISortForm() {
        try{
            initComponents();
            this.lblErrorArrayDataInvalid.setVisible(false);
            this.lblErrorArrayEmpty.setVisible(false);
            this.lblNoCheck.setVisible(false);
            Calendar now = Calendar.getInstance();
            JLabelFecha.setText(dateFormat.format(now.getTime()));
        
            new Timer(500, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    Calendar now = Calendar.getInstance();
                    JLabelFecha.setText(dateFormat.format(now.getTime()));
                }
            }).start();
            
            arrayInputTextField.addMouseListener(new MouseAdapter(){
                public void mouseClicked(MouseEvent e)
                {
                    boolean hasError = false;
                    if (lblErrorArrayEmpty.isVisible())
                    {
                        lblErrorArrayEmpty.setVisible(false);
                        hasError = true;
                    }

                    if (lblErrorArrayDataInvalid.isVisible())
                    {
                        lblErrorArrayDataInvalid.setVisible(false);
                        hasError = true;
                    }

                    if (hasError){
                        arrayInputTextField.setText("");
                        repaint();
                        revalidate();
                    }
                }
            });
        
            this.jCheckBoxInsertionSort.addMouseListener(new MouseAdapter(){
                public void mouseClicked(MouseEvent e)
                {
                    if (lblNoCheck.isVisible())
                    {
                        lblNoCheck.setVisible(false);
                    }

                }
            });

            this.jCheckBoxMerge.addMouseListener(new MouseAdapter(){
                public void mouseClicked(MouseEvent e)
                {
                    if (lblNoCheck.isVisible())
                    {
                        lblNoCheck.setVisible(false);
                    }

                }
            });

            this.jCheckBoxQuickSort.addMouseListener(new MouseAdapter(){
                public void mouseClicked(MouseEvent e)
                {
                    if (lblNoCheck.isVisible())
                    {
                        lblNoCheck.setVisible(false);
                    }

                }
            });


            this.jCheckBoxSelectionSort.addMouseListener(new MouseAdapter(){
                public void mouseClicked(MouseEvent e)
                {
                    if (lblNoCheck.isVisible())
                    {
                        lblNoCheck.setVisible(false);
                    }

                }
            });
        }
        catch (Exception exc){
        }
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JLabelFecha = new javax.swing.JLabel();
        jLabelArrayInput = new javax.swing.JLabel();
        arrayInputTextField = new javax.swing.JTextField();
        lblErrorArrayEmpty = new javax.swing.JLabel();
        lblErrorArrayDataInvalid = new javax.swing.JLabel();
        jButtonAddRandomeNumber = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabelNumButtonInfo = new javax.swing.JLabel();
        jLabelPipeButtonInfo = new javax.swing.JLabel();
        jLabelSortAlgorithm = new javax.swing.JLabel();
        jCheckBoxMerge = new javax.swing.JCheckBox();
        jCheckBoxQuickSort = new javax.swing.JCheckBox();
        jCheckBoxSelectionSort = new javax.swing.JCheckBox();
        jCheckBoxInsertionSort = new javax.swing.JCheckBox();
        lblNoCheck = new javax.swing.JLabel();
        jButtonNext = new javax.swing.JButton();
        jLabelDeleteButtonInfo1 = new javax.swing.JLabel();
        jLabelNumButtonInfo1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("ISortForm");
        setToolTipText("");

        JLabelFecha.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        JLabelFecha.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLabelFecha.setText("Fecha");

        jLabelArrayInput.setText("Array Input:");

        lblErrorArrayEmpty.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorArrayEmpty.setText("The input array is empty");

        lblErrorArrayDataInvalid.setForeground(new java.awt.Color(255, 0, 0));
        lblErrorArrayDataInvalid.setText("The input array data is not valid");

        jButtonAddRandomeNumber.setText("Add number");
        jButtonAddRandomeNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddRandomeNumberActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabelNumButtonInfo.setText("2) Use \"Add number\" button to added the input number plus pipe char.");

        jLabelPipeButtonInfo.setText("4) Rememver to use pipe char between the input numbers.");

        jLabelSortAlgorithm.setText("Sort algorithms:");

        jCheckBoxMerge.setText("Merge");
        jCheckBoxMerge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMergeActionPerformed(evt);
            }
        });

        jCheckBoxQuickSort.setText("Quick Sort");

        jCheckBoxSelectionSort.setText("Selection Sort");

        jCheckBoxInsertionSort.setText("Insertion Sort");

        lblNoCheck.setForeground(new java.awt.Color(255, 0, 0));
        lblNoCheck.setText("Check a checkbox item , please!");

        jButtonNext.setText("Next");
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jLabelDeleteButtonInfo1.setText("3) Use Delete button to remove the last number input.");

        jLabelNumButtonInfo1.setText("1) The array input should be enter with the format xx|xx|xx|xx|xx  Vx, x=N");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabelArrayInput)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblErrorArrayDataInvalid, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorArrayEmpty, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(arrayInputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(44, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNumButtonInfo)
                            .addComponent(jLabelNumButtonInfo1)
                            .addComponent(jLabelDeleteButtonInfo1)
                            .addComponent(jLabelPipeButtonInfo)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelSortAlgorithm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxQuickSort)
                                    .addComponent(jCheckBoxMerge)
                                    .addComponent(jCheckBoxInsertionSort)
                                    .addComponent(jCheckBoxSelectionSort)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(lblNoCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonNext)))
                .addGap(43, 43, 43))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jButtonAddRandomeNumber)
                        .addGap(30, 30, 30)
                        .addComponent(deleteButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(JLabelFecha)))
                .addContainerGap(206, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(JLabelFecha)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelArrayInput)
                    .addComponent(arrayInputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(lblErrorArrayEmpty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblErrorArrayDataInvalid)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddRandomeNumber)
                    .addComponent(deleteButton))
                .addGap(32, 32, 32)
                .addComponent(jLabelNumButtonInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelNumButtonInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelDeleteButtonInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jLabelPipeButtonInfo)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxMerge)
                    .addComponent(jLabelSortAlgorithm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxQuickSort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxSelectionSort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxInsertionSort)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonNext)
                    .addComponent(lblNoCheck))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddRandomeNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddRandomeNumberActionPerformed
        // TODO add your handling code here:
        
        if (this.lblErrorArrayEmpty.isVisible())
        {
            this.lblErrorArrayEmpty.setVisible(false);
        }
        
        Random rand = new Random();
        int number = rand.nextInt(100) + 1;
        String text = arrayInputTextField.getText();
        StringBuilder sb = new StringBuilder();

        if (!text.equals("")){
            sb.append(text);
            boolean res = text.endsWith(pipe);
            if (!res){
                sb.append(pipe);
            }
            sb.append(number);
            arrayInputTextField.setText(sb.toString());
        }
        else{
            sb.append(pipe);
            sb.append(number);
            arrayInputTextField.setText(sb.toString());
            arrayInputTextField.setText(Integer.toString(number));
        }

        //50 is the maximum and the 1 is our minimum
    }//GEN-LAST:event_jButtonAddRandomeNumberActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        String text = arrayInputTextField.getText();

        if ((!text.equals("")) && (text.contains(pipe))){
            String textToUpdate = text;
            int index = textToUpdate.lastIndexOf(pipe);
            textToUpdate = textToUpdate.substring(0, index);
            arrayInputTextField.setText(textToUpdate);
        }
        else
        {
            arrayInputTextField.setText("");
        }
        
        if (text.equals("")){
            if (lblErrorArrayDataInvalid.isVisible()){
                lblErrorArrayDataInvalid.setVisible(false);
            }
            
            if (this.lblErrorArrayEmpty.isVisible()){
                lblErrorArrayEmpty.setVisible(false);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    public boolean validateNext(){
        boolean res1 = true, res2 = true, res3 = true;
        
        //Verify empty input 
        if (getInputText().isEmpty()){
            lblErrorArrayEmpty.setVisible(true);
            res1 = false;
        }
        
        //Verify input only has digits and pipe char
        String pattern = "[^\\d|]";
        Pattern r = Pattern.compile(pattern);
        Matcher m = r.matcher(getInputText());
        if ((m.find()) && (!getInputText().isEmpty())) {
            lblErrorArrayDataInvalid.setVisible(true);
            res2 = false;
        }
        
        //Verify at least one checkbox is checked
        boolean checkBoxInsertion = this.getjCheckBoxInsertionSort().isSelected();
        boolean checkBoxMerge = this.getjCheckBoxMerge().isSelected();
        boolean checkBoxQuick = this.getjCheckBoxQuickSort().isSelected();
        boolean checkBoxSelection = this.getjCheckBoxSelectionSort().isSelected();
        
        res3 = checkBoxInsertion || checkBoxMerge || checkBoxQuick || checkBoxSelection;
        
        if (!res3){
            this.lblNoCheck.setVisible(true);
            res3 = false;
        }
        
        return (res1 && res2 && res3);
    }
    
    public JCheckBox getjCheckBoxMerge(){
        return this.jCheckBoxMerge;
    }
    
    public JCheckBox getjCheckBoxInsertionSort(){
        return this.jCheckBoxInsertionSort;
    }
     
    public JCheckBox getjCheckBoxQuickSort(){
        return this.jCheckBoxQuickSort;
    }

    public JCheckBox getjCheckBoxSelectionSort(){
        return this.jCheckBoxSelectionSort;
    }
    
    public void setjCheckBoxMergeFalse(){
        this.jCheckBoxMerge.setSelected(false);
    }
    
    public void setjCheckBoxInsertionSortFalse(){
        this.jCheckBoxInsertionSort.setSelected(false);
    }
     
    public void setjCheckBoxQuickSortFalse(){
        this.jCheckBoxQuickSort.setSelected(false);
    }

    public void setjCheckBoxSelectionSortFalse(){
        this.jCheckBoxSelectionSort.setSelected(false);
    }
    
    public JButton getjBNextIsortForm(){
        return this.jButtonNext;
    }
    
    public JTextField getInputField(){
        return this.arrayInputTextField;
    }
    
    public String getInputText(){
        return this.arrayInputTextField.getText();
    }
    
    public int[] getArrayInput(){
        String[] arrayElements = getInputText().split("\\|");

        int[] res = new int[arrayElements.length];
        
        for (int i=0;i<arrayElements.length;i++)
        {
            try {
                res[i] = Integer.parseInt(arrayElements[i]);
            } catch (NumberFormatException e){

            }
        }
        return res;
    }
    
    public void setInputText(String text){
        this.arrayInputTextField.setText(text);
    }
    
    public void setSelectedCheckboxFalse_()
    {
        if(this.jCheckBoxInsertionSort.isSelected()){
            this.jCheckBoxInsertionSort.setSelected(false);
        }
        
        if(this.jCheckBoxMerge.isSelected()){
            this.jCheckBoxMerge.setSelected(false);
        }
        
        
        if(this.jCheckBoxSelectionSort.isSelected()){
            this.jCheckBoxSelectionSort.setSelected(false);
        }
        
        
        if(this.jCheckBoxQuickSort.isSelected()){
            this.jCheckBoxQuickSort.setSelected(false);
        }
            
    }
   
    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jCheckBoxMergeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMergeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxMergeActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabelFecha;
    private javax.swing.JTextField arrayInputTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton jButtonAddRandomeNumber;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JCheckBox jCheckBoxInsertionSort;
    private javax.swing.JCheckBox jCheckBoxMerge;
    private javax.swing.JCheckBox jCheckBoxQuickSort;
    private javax.swing.JCheckBox jCheckBoxSelectionSort;
    private javax.swing.JLabel jLabelArrayInput;
    private javax.swing.JLabel jLabelDeleteButtonInfo1;
    private javax.swing.JLabel jLabelNumButtonInfo;
    private javax.swing.JLabel jLabelNumButtonInfo1;
    private javax.swing.JLabel jLabelPipeButtonInfo;
    private javax.swing.JLabel jLabelSortAlgorithm;
    private javax.swing.JLabel lblErrorArrayDataInvalid;
    private javax.swing.JLabel lblErrorArrayEmpty;
    private javax.swing.JLabel lblNoCheck;
    // End of variables declaration//GEN-END:variables
}
