/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import logic.controllers.Context;
import java.awt.Container;
import java.awt.Dimension;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import logic.controllers.InsertionSortStrategy;
import logic.controllers.MergeStrategy;
import logic.controllers.QuickSortStrategy;
import logic.controllers.SelectionSortStrategy;
import logic.interfaces.Factory;

/**
 *
 * @author Sebastian Rodriguez
 * @email roskoff@hotmail.es
 * @linkedin https://uy.linkedin.com/in/sebastianr88
 *
 */

public class ISortRobot extends javax.swing.JFrame {

    /**
     * Creates new form ISortRotbot
     */
    
    public ISortRobot() {
        initComponents();
        setContentPane(desktop);
        Factory factory = Factory.getInstance(); 
        
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktop = new javax.swing.JDesktopPane();
        jMenuBar = new javax.swing.JMenuBar();
        jISortingRobotMenu = new javax.swing.JMenu();
        jMItemISortingRobot = new javax.swing.JMenuItem();
        jViewExecutionHistory = new javax.swing.JMenu();
        jMItemViewExecutionHistory = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 447, Short.MAX_VALUE)
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 624, Short.MAX_VALUE)
        );

        jISortingRobotMenu.setText("Menu");

        jMItemISortingRobot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_NUMPAD1, java.awt.event.InputEvent.CTRL_MASK));
        jMItemISortingRobot.setText("ISorting Robot");
        jMItemISortingRobot.setSelected(true);
        jMItemISortingRobot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMItemISortingRobotActionPerformed(evt);
            }
        });
        jISortingRobotMenu.add(jMItemISortingRobot);

        jMenuBar.add(jISortingRobotMenu);

        jViewExecutionHistory.setText("History");

        jMItemViewExecutionHistory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_NUMPAD2, java.awt.event.InputEvent.CTRL_MASK));
        jMItemViewExecutionHistory.setText("View execution history");
        jMItemViewExecutionHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMItemViewExecutionHistoryActionPerformed(evt);
            }
        });
        jViewExecutionHistory.add(jMItemViewExecutionHistory);

        jMenuBar.add(jViewExecutionHistory);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(157, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void goToISortResult(java.awt.event.ActionEvent evt, ISortForm step1,  ISortResult step2 ){
        JCheckBox getCheckBoxInsertionSort = step1.getjCheckBoxInsertionSort();
        JCheckBox getCheckBoxMerge = step1.getjCheckBoxMerge();
        JCheckBox getCheckBoxQuickSort = step1.getjCheckBoxQuickSort();
        JCheckBox getCheckBoxSelectionSort = step1.getjCheckBoxSelectionSort();
        
        String res = "";
        Date d1, d2 = null;
        
        if (step1.validateNext()){
            step1.hide();
            try{
                step2.setInputText(step1.getInputText());
                
                if (getCheckBoxInsertionSort.isSelected())
                {
                    d1 = new Date();
                    context = new Context(new InsertionSortStrategy());
                    res = context.executeStrategy(step1.getArrayInput());
                    d2 = new Date();
                    
                    System.out.println(d2.getTime()-d1.getTime()); 
                    
                    step2.setInsertionSortTimeResult((d2.getTime()-d1.getTime()) + " ms");
                }
                else
                {
                     step2.setInsertionSortTimeResult("0 ms");
                }
                
                if (getCheckBoxSelectionSort.isSelected())
                {
                    d1 = new Date();
                    context = new Context(new SelectionSortStrategy());
                    res = context.executeStrategy(step1.getArrayInput());
                    d2 = new Date();
                    
                    System.out.println(d2.getTime()-d1.getTime()); 
                    
                    step2.setSelectionSortTimeResult((d2.getTime()-d1.getTime()) + " ms");
                    
                }
                else
                {
                    step2.setSelectionSortTimeResult("0 ms");   
                }
                
                if (getCheckBoxMerge.isSelected())
                {
                    d1 = new Date();
                    context = new Context(new MergeStrategy());
                    res = context.executeStrategy(step1.getArrayInput());
                    d2 = new Date();
                   
                    System.out.println(d2.getTime()-d1.getTime()); 
                    
                    step2.setMergeTimeResult((d2.getTime()-d1.getTime()) + " ms");
                }
                else
                {
                    step2.setMergeTimeResult("0 ms");   
                }
                
                
                if (getCheckBoxQuickSort.isSelected())
                {
                    d1 = new Date();
                    context = new Context(new QuickSortStrategy());
                    res = context.executeStrategy(step1.getArrayInput());
                    d2 = new Date();
                    
                    System.out.println(d2.getTime()-d1.getTime()); 
                    
                    step2.setQuickSortTimeResult((d2.getTime()-d1.getTime()) + " ms");
                    
                }
                else
                {
                    step2.setQuickSortTimeResult("0 ms"); 
                }
                
                step2.setInputResultText(res);
                step2.show();
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(adialog,ex.getMessage(),"Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void goToISortForm(java.awt.event.ActionEvent evt, ISortForm step1,  ISortResult step2 ){
        try{
            step2.hide();
            step2.setInputResultText("");
            step2.setInputText("");
            
            /*
            step2 = new ISortResult();
            step2.removeAll();
            step2.updateUI();
            */
            step1.setInputText("");
            step1.setjCheckBoxInsertionSortFalse();
            step1.setjCheckBoxMergeFalse();
            step1.setjCheckBoxQuickSortFalse();
            step1.setjCheckBoxSelectionSortFalse();
            step1.show();
        }
        catch(Exception exc){
        }
    }
    
    private void jMItemISortingRobotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMItemISortingRobotActionPerformed
        // TODO add your handling code here:
        
        final ISortForm form = new ISortForm();
        final ISortResult sortingResult = new ISortResult();
        form.setVisible(true);
        desktop.add(form);
        desktop.add(sortingResult);
        form.show();
        try {
            form.setSelected(true);
        } 
        catch (java.beans.PropertyVetoException e)
        {
           
        }
        
        JButton btnNextStep = form.getjBNextIsortForm();
        btnNextStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToISortResult(evt,form,sortingResult);
            }
        });
        
        JButton btnPreviousStep = sortingResult.getjBPreviousIsortForm();
        btnPreviousStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToISortForm(evt,form,sortingResult);
            }
        });
       
    }//GEN-LAST:event_jMItemISortingRobotActionPerformed

    private void jMItemViewExecutionHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMItemViewExecutionHistoryActionPerformed
        // TODO add your handling code here:
        final ISortHistory historyView = new ISortHistory();
        historyView.setVisible(true);
        desktop.add(historyView);
        historyView.show();
        try {
            historyView.setSelected(true);
        } 
        catch (java.beans.PropertyVetoException e)
        {
           
        }
    }//GEN-LAST:event_jMItemViewExecutionHistoryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ISortRobot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ISortRobot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ISortRobot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ISortRobot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ISortRobot().setVisible(true);
            }
        });
    }

private InsertionSortStrategy ISScontroller;
private MergeStrategy MergeController;
private QuickSortStrategy QuickController;
private SelectionSortStrategy SScontroller;
private Context context;
private AltaDialog adialog;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JMenu jISortingRobotMenu;
    private javax.swing.JMenuItem jMItemISortingRobot;
    private javax.swing.JMenuItem jMItemViewExecutionHistory;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jViewExecutionHistory;
    // End of variables declaration//GEN-END:variables
}
